<?php
/**
 * Friends Of Presta Published Vulnerability Scan
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file docs/licenses/LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/afl-3.0.php
 *
 * @author    Experto PrestaShop <https://www.youtube.com/@ExpertoPrestaShop>
 * @copyright since 2009 Experto PrestaShop
 * @license   https://opensource.org/licenses/AFL-3.0  Academic Free License ("AFL") v. 3.0
 */

if (!defined('_PS_VERSION_')) {
    exit;
}

require dirname(__FILE__) . '/vendor/autoload.php';

class Fop_PublishedVulnerabilityScan extends Module
{
    public function __construct()
    {
        $this->name = 'fop_publishedvulnerabilityscan';
        $this->tab = 'administration';
        $this->version = '1.5.0';
        $this->author = 'Experto PrestaShop';
        $this->need_instance = 1;
        $this->bootstrap = true;
        $this->multishop_context = Shop::CONTEXT_ALL;
        $this->secure_key = Tools::encrypt($this->name);

        parent::__construct();

        $this->displayName = $this->l('Friends Of Presta Published Vulnerability Scan');
        $this->description = $this->l('Scans your shop searching for any vulnerability published on the FOP security advisories list.');

        $this->ps_versions_compliancy = ['min' => '1.6', 'max' => _PS_VERSION_];
    }

    public function install()
    {
        return parent::install()
            && Configuration::updateValue('FOPPVS_NOTIFICATION_EMAILS', Configuration::get('PS_SHOP_EMAIL'));
    }

    public function uninstall()
    {
        return parent::uninstall()
            && Configuration::deleteByName('FOPPVS_NOTIFICATION_EMAILS')
            && Configuration::deleteByName('FOPPVS_LAST_LIST_DOWNLOAD')
            && Configuration::deleteByName('FOPPVS_LAST_LIST_PROCESSED')
            && Configuration::deleteByName('FOPPVS_LAST_REPORT');
    }

    public function getContent()
    {
        $output = '';
        $file_path_security_list = $this->local_path . 'downloads/security_list_feed.xml';
        $file_path_modules_check_list = $this->local_path . 'downloads/modules_check_list.json';

        if (!file_exists($file_path_security_list)
            || Configuration::get('FOPPVS_LAST_LIST_DOWNLOAD') < strtotime('-24 hour')
        ) {
            if (Tools::copy('https://security.friendsofpresta.org/feed.xml', $file_path_security_list)) {
                Configuration::updateValue('FOPPVS_LAST_LIST_DOWNLOAD', time());
            } else {
                $output .= $this->displayError($this->l('Security list file cannot be downloaded.') . ' ' . $this->l('Try again later.'));
            }
        }

        if (file_exists($file_path_security_list)) {
            if (!$xml = @simplexml_load_file($file_path_security_list)) {
                @unlink($file_path_security_list);
                $output .= $this->displayError($this->l('Security list data cannot be processed.') . ' ' . $this->l('Try again later.'));
            } elseif (!file_exists($file_path_modules_check_list)
                || Configuration::get('FOPPVS_LAST_LIST_PROCESSED') < strtotime($xml->updated)
            ) {
                if ($modules_check_list = FopPvsTools::processModulesCheckList($xml)) {
                    Configuration::updateValue('FOPPVS_LAST_LIST_PROCESSED', strtotime($xml->updated));
                    file_put_contents($file_path_modules_check_list, json_encode($modules_check_list));

                    $output .= $this->displayConfirmation($this->l('New modules security list data processed.'));
                } else {
                    @unlink($file_path_modules_check_list);
                    $output .= $this->displayError($this->l('Modules security list data cannot be processed.') . ' ' . $this->l('Try again later.'));
                }
            }
        }

        if (!file_exists($file_path_modules_check_list)) {
            $output .= $this->displayError($this->l('Security list data cannot be processed.') . ' ' . $this->l('Try again later.'));
        }

        $url_params = [
            'token' => $this->secure_key,
        ];
        $this->adminDisplayInformation($this->l('You can use this URL to setup a cronjob to alert you by email when a new security threats is detected:') . ' ' . $this->context->link->getModuleLink($this->name, 'cron', $url_params, true));

        if (Tools::isSubmit('exportList')) {
            if (ob_get_level() && ob_get_length() > 0) {
                ob_end_clean();
            }

            header('Content-type: application/json');
            header('Content-Type: application/force-download; charset=UTF-8');
            header('Cache-Control: no-store, no-cache');
            header('Content-disposition: attachment; filename="security_check_module_list_' . date('Y-m-d_His') . '.json"');

            die(Configuration::get('FOPPVS_LAST_REPORT'));
        } elseif (Tools::isSubmit('submit' . $this->name)) {
            if (empty(Tools::getValue('FOPPVS_NOTIFICATION_EMAILS'))) {
                $output .= $this->displayError($this->l('Notification Emails field is required.'));
            } else {
                $commaSeparateEmails = explode(',', Tools::getValue('FOPPVS_NOTIFICATION_EMAILS'));
                $hasErrors = false;
                foreach ($commaSeparateEmails as $email) {
                    if (!Validate::isEmail($email)) {
                        $output .= $this->displayError($this->l('Invalid email:') . ' ' . $email);
                        $hasErrors = true;
                    }
                }

                if (!$hasErrors) {
                    Configuration::updateValue('FOPPVS_NOTIFICATION_EMAILS', Tools::getValue('FOPPVS_NOTIFICATION_EMAILS'));

                    Tools::redirectAdmin($this->context->link->getAdminLink('AdminModules') .
                        '&configure=' . $this->name .
                        '&conf=4');
                }
            }
        }

        return $output . $this->renderForm() . $this->context->smarty->fetch($this->local_path . 'views/templates/admin/credits.tpl');
    }

    public function renderForm()
    {
        $modules_issues = [];
        $file_path_modules_check_list = $this->local_path . 'downloads/modules_check_list.json';
        if (file_exists($file_path_modules_check_list)
         && $json_modules_check_list = @json_decode(Tools::file_get_contents($file_path_modules_check_list))
        ) {
            $modules_issues = FopPvsTools::getModulesIssueList($json_modules_check_list);

            array_walk($modules_issues, function (&$value) {
                unset($value->min_version, $value->max_version);
            });
            Configuration::updateValue('FOPPVS_LAST_REPORT', json_encode($modules_issues, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT));
        }

        $this->context->smarty->assign(['modules_issues' => $modules_issues]);

        $fields_form_vulnerabilities = [
            'form' => [
                'legend' => [
                    'title' => $this->l('Vulnerabilities'),
                    'icon' => 'icon-exclamation',
                ],
                'input' => [
                    [
                        'type' => 'html',
                        'html_content' => $this->context->smarty->fetch($this->local_path . 'views/templates/admin/modules_issues.tpl'),
                        'name' => 'VULNERABILITIES_FOUND',
                    ],
                ],
                'buttons' => [
                    'exportList' => [
                        'name' => 'exportList',
                        'type' => 'submit',
                        'title' => $this->l('Export list'),
                        'class' => 'pull-right ' . ($modules_issues ? '' : 'hidden'),
                        'icon' => 'process-icon-save',
                    ],
                ],
            ],
        ];

        $fields_form_configuration = [
            'form' => [
                'legend' => [
                    'title' => $this->l('Configuration'),
                    'icon' => 'icon-cogs',
                ],
                'input' => [
                    [
                        'type' => 'text',
                        'label' => $this->l('Notification Emails'),
                        'name' => 'FOPPVS_NOTIFICATION_EMAILS',
                        'desc' => $this->l('Comma separated emails to receive notifications. They will be sent when a new security threat is detected if you have setup a cronjob.'),
                        'required' => true,
                    ],
                ],
                'submit' => [
                    'title' => $this->l('Save'),
                ],
            ],
        ];

        $helper = new HelperForm();
        $helper->show_toolbar = false;
        $helper->table = $this->table;
        $helper->default_form_language = (int) Configuration::get('PS_LANG_DEFAULT');
        $helper->allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') ? Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG') : 0;
        $helper->identifier = $this->identifier;
        $helper->submit_action = 'submit' . $this->name;
        $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false) .
            '&configure=' . $this->name .
            '&tab_module=' . $this->tab .
            '&module_name=' . $this->name;
        $helper->token = Tools::getAdminTokenLite('AdminModules');
        $helper->tpl_vars = [
            'fields_value' => [
                'FOPPVS_NOTIFICATION_EMAILS' => Tools::getValue('FOPPVS_NOTIFICATION_EMAILS', Configuration::get('FOPPVS_NOTIFICATION_EMAILS')),
            ],
            'languages' => $this->context->controller->getLanguages(),
            'id_language' => $this->context->language->id,
        ];

        return $helper->generateForm([$fields_form_vulnerabilities, $fields_form_configuration]);
    }
}
