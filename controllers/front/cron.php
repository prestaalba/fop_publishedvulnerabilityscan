<?php
/**
 * Friends Of Presta Published Vulnerability Scan
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file docs/licenses/LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * https://opensource.org/licenses/afl-3.0.php
 *
 * @author    Experto PrestaShop <https://www.youtube.com/@ExpertoPrestaShop>
 * @copyright since 2009 Experto PrestaShop
 * @license   https://opensource.org/licenses/AFL-3.0  Academic Free License ("AFL") v. 3.0
 */

if (!defined('_PS_VERSION_')) {
    exit;
}

class Fop_PublishedVulnerabilityScanCronModuleFrontController extends ModuleFrontController
{
    public $ssl = true;
    public $display_column_left = false;
    public $display_column_right = false;

    public function postProcess()
    {
        if (Tools::getValue('token') == $this->module->secure_key) {
            $modules_issues = [];
            $file_path_modules_check_list = $this->module->getLocalPath() . 'downloads/modules_check_list.json';
            if (file_exists($file_path_modules_check_list)
             && $json_modules_check_list = @json_decode(Tools::file_get_contents($file_path_modules_check_list))
            ) {
                $modules_issues = FopPvsTools::getModulesIssueList($json_modules_check_list);

                array_walk($modules_issues, function (&$value) {
                    unset($value->min_version, $value->max_version);
                });

                $json_text = json_encode($modules_issues, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT);

                if ($json_text != Configuration::get('FOPPVS_LAST_REPORT')) {
                    $template_vars = [
                        '{firstname}' => '',
                        '{lastname}' => '',
                        '{message}' => 'There are new security threats detected in your shop ' . Configuration::get('PS_SHOP_NAME') . '. You can check for more details at module ' . $this->module->displayName,
                    ];
                    $emails = explode(',', Configuration::get('FOPPVS_NOTIFICATION_EMAILS'));
                    if (empty($emails)) {
                        $emails = [Configuration::get('PS_SHOP_EMAIL')];
                    }
                    foreach ($emails as $email) {
                        Mail::send((int) Context::getContext()->language->id, 'newsletter', 'New security threats detected', $template_vars, $email);
                    }
                }

                Configuration::updateValue('FOPPVS_LAST_REPORT', $json_text);

                die('1');
            }
        }

        die('0');
    }
}
